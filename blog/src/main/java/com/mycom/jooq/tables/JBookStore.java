/*
 * This file is generated by jOOQ.
 */
package com.mycom.jooq.tables;


import com.mycom.jooq.JSpbooter;
import com.mycom.jooq.Keys;
import com.mycom.jooq.tables.records.JBookStoreRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JBookStore extends TableImpl<JBookStoreRecord> {

    private static final long serialVersionUID = 213990234;

    /**
     * The reference instance of <code>SPBOOTER.BOOK_STORE</code>
     */
    public static final JBookStore BOOK_STORE = new JBookStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JBookStoreRecord> getRecordType() {
        return JBookStoreRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JBookStoreRecord, Object> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JBookStoreRecord, Object> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * Create a <code>SPBOOTER.BOOK_STORE</code> table reference
     */
    public JBookStore() {
        this(DSL.name("BOOK_STORE"), null);
    }

    /**
     * Create an aliased <code>SPBOOTER.BOOK_STORE</code> table reference
     */
    public JBookStore(String alias) {
        this(DSL.name(alias), BOOK_STORE);
    }

    /**
     * Create an aliased <code>SPBOOTER.BOOK_STORE</code> table reference
     */
    public JBookStore(Name alias) {
        this(alias, BOOK_STORE);
    }

    private JBookStore(Name alias, Table<JBookStoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private JBookStore(Name alias, Table<JBookStoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JBookStore(Table<O> child, ForeignKey<O, JBookStoreRecord> key) {
        super(child, key, BOOK_STORE);
    }

    @Override
    public Schema getSchema() {
        return JSpbooter.SPBOOTER;
    }

    @Override
    public UniqueKey<JBookStoreRecord> getPrimaryKey() {
        return Keys.PK_BOOK_STORE;
    }

    @Override
    public List<UniqueKey<JBookStoreRecord>> getKeys() {
        return Arrays.<UniqueKey<JBookStoreRecord>>asList(Keys.PK_BOOK_STORE);
    }

    @Override
    public JBookStore as(String alias) {
        return new JBookStore(DSL.name(alias), this);
    }

    @Override
    public JBookStore as(Name alias) {
        return new JBookStore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JBookStore rename(String name) {
        return new JBookStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBookStore rename(Name name) {
        return new JBookStore(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Object, Object> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
