/*
 * This file is generated by jOOQ.
 */
package com.mycom.jooq.tables;


import com.mycom.jooq.JSpbooter;
import com.mycom.jooq.Keys;
import com.mycom.jooq.tables.records.JReplyRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JReply extends TableImpl<JReplyRecord> {

    private static final long serialVersionUID = 1776760013;

    /**
     * The reference instance of <code>SPBOOTER.REPLY</code>
     */
    public static final JReply REPLY = new JReply();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JReplyRecord> getRecordType() {
        return JReplyRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JReplyRecord, Object> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JReplyRecord, Object> CONTENT = createField(DSL.name("CONTENT"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>SPBOOTER.REPLY.CREATE_DATE</code>.
     */
    public final TableField<JReplyRecord, Timestamp> CREATE_DATE = createField(DSL.name("CREATE_DATE"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(11).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JReplyRecord, Object> BOARD_ID = createField(DSL.name("BOARD_ID"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JReplyRecord, Object> USERNO = createField(DSL.name("USERNO"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * Create a <code>SPBOOTER.REPLY</code> table reference
     */
    public JReply() {
        this(DSL.name("REPLY"), null);
    }

    /**
     * Create an aliased <code>SPBOOTER.REPLY</code> table reference
     */
    public JReply(String alias) {
        this(DSL.name(alias), REPLY);
    }

    /**
     * Create an aliased <code>SPBOOTER.REPLY</code> table reference
     */
    public JReply(Name alias) {
        this(alias, REPLY);
    }

    private JReply(Name alias, Table<JReplyRecord> aliased) {
        this(alias, aliased, null);
    }

    private JReply(Name alias, Table<JReplyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JReply(Table<O> child, ForeignKey<O, JReplyRecord> key) {
        super(child, key, REPLY);
    }

    @Override
    public Schema getSchema() {
        return JSpbooter.SPBOOTER;
    }

    @Override
    public UniqueKey<JReplyRecord> getPrimaryKey() {
        return Keys.PK_REPLY;
    }

    @Override
    public List<UniqueKey<JReplyRecord>> getKeys() {
        return Arrays.<UniqueKey<JReplyRecord>>asList(Keys.PK_REPLY);
    }

    @Override
    public JReply as(String alias) {
        return new JReply(DSL.name(alias), this);
    }

    @Override
    public JReply as(Name alias) {
        return new JReply(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JReply rename(String name) {
        return new JReply(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JReply rename(Name name) {
        return new JReply(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Object, Object, Timestamp, Object, Object> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
