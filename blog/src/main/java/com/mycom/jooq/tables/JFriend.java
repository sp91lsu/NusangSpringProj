/*
 * This file is generated by jOOQ.
 */
package com.mycom.jooq.tables;


import com.mycom.jooq.JSpbooter;
import com.mycom.jooq.Keys;
import com.mycom.jooq.tables.records.JFriendRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JFriend extends TableImpl<JFriendRecord> {

    private static final long serialVersionUID = 1331229467;

    /**
     * The reference instance of <code>SPBOOTER.FRIEND</code>
     */
    public static final JFriend FRIEND = new JFriend();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JFriendRecord> getRecordType() {
        return JFriendRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JFriendRecord, Object> FRIEND_NO = createField(DSL.name("FRIEND_NO"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>SPBOOTER.FRIEND.CREATE_DATE</code>.
     */
    public final TableField<JFriendRecord, Timestamp> CREATE_DATE = createField(DSL.name("CREATE_DATE"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(11).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JFriendRecord, Object> FRIEND_TYPE = createField(DSL.name("FRIEND_TYPE"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JFriendRecord, Object> FROM_WHO_USERNO = createField(DSL.name("FROM_WHO_USERNO"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JFriendRecord, Object> USERNO = createField(DSL.name("USERNO"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JFriendRecord, Object> USER_USERNO = createField(DSL.name("USER_USERNO"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * Create a <code>SPBOOTER.FRIEND</code> table reference
     */
    public JFriend() {
        this(DSL.name("FRIEND"), null);
    }

    /**
     * Create an aliased <code>SPBOOTER.FRIEND</code> table reference
     */
    public JFriend(String alias) {
        this(DSL.name(alias), FRIEND);
    }

    /**
     * Create an aliased <code>SPBOOTER.FRIEND</code> table reference
     */
    public JFriend(Name alias) {
        this(alias, FRIEND);
    }

    private JFriend(Name alias, Table<JFriendRecord> aliased) {
        this(alias, aliased, null);
    }

    private JFriend(Name alias, Table<JFriendRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JFriend(Table<O> child, ForeignKey<O, JFriendRecord> key) {
        super(child, key, FRIEND);
    }

    @Override
    public Schema getSchema() {
        return JSpbooter.SPBOOTER;
    }

    @Override
    public UniqueKey<JFriendRecord> getPrimaryKey() {
        return Keys.PK_FRIEND;
    }

    @Override
    public List<UniqueKey<JFriendRecord>> getKeys() {
        return Arrays.<UniqueKey<JFriendRecord>>asList(Keys.PK_FRIEND);
    }

    @Override
    public JFriend as(String alias) {
        return new JFriend(DSL.name(alias), this);
    }

    @Override
    public JFriend as(Name alias) {
        return new JFriend(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JFriend rename(String name) {
        return new JFriend(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFriend rename(Name name) {
        return new JFriend(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Object, Timestamp, Object, Object, Object, Object> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
